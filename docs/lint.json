[
  {
    "name": "ChainStore#getAccountRefsOfKey",
    "filePath": "lib/chain/src/ChainStore.js",
    "lines": [
      {
        "lineNumber": 475,
        "line": "    /**"
      },
      {
        "lineNumber": 476,
        "line": "     *  @param the public key to find accounts that reference it"
      },
      {
        "lineNumber": 477,
        "line": "     *"
      },
      {
        "lineNumber": 478,
        "line": "     *  @return Set of account ids that reference the given key"
      },
      {
        "lineNumber": 479,
        "line": "     *  @return a empty Set if no items are found"
      },
      {
        "lineNumber": 480,
        "line": "     *  @return undefined if the result is unknown"
      },
      {
        "lineNumber": 481,
        "line": "     *"
      },
      {
        "lineNumber": 482,
        "line": "     *  If this method returns undefined, then it will send a request to"
      },
      {
        "lineNumber": 483,
        "line": "     *  the server for the current set of accounts after which the"
      },
      {
        "lineNumber": 484,
        "line": "     *  server will notify us of any accounts that reference these keys"
      },
      {
        "lineNumber": 485,
        "line": "     */"
      },
      {
        "lineNumber": 486,
        "line": "    getAccountRefsOfKey(key) {"
      }
    ],
    "codeParams": [
      "key"
    ],
    "docParams": [
      "the"
    ]
  },
  {
    "name": "ChainStore#getAccountRefsOfAccount",
    "filePath": "lib/chain/src/ChainStore.js",
    "lines": [
      {
        "lineNumber": 521,
        "line": "    /**"
      },
      {
        "lineNumber": 522,
        "line": "     *  @param the account id to find accounts that reference it"
      },
      {
        "lineNumber": 523,
        "line": "     *"
      },
      {
        "lineNumber": 524,
        "line": "     *  @return Set of account ids that reference the given key"
      },
      {
        "lineNumber": 525,
        "line": "     *  @return a empty Set if no items are found"
      },
      {
        "lineNumber": 526,
        "line": "     *  @return undefined if the result is unknown"
      },
      {
        "lineNumber": 527,
        "line": "     *"
      },
      {
        "lineNumber": 528,
        "line": "     *  If this method returns undefined, then it will send a request to"
      },
      {
        "lineNumber": 529,
        "line": "     *  the server for the current set of accounts after which the"
      },
      {
        "lineNumber": 530,
        "line": "     *  server will notify us of any accounts that reference these keys"
      },
      {
        "lineNumber": 531,
        "line": "     */"
      },
      {
        "lineNumber": 532,
        "line": "    getAccountRefsOfAccount(account_id) {"
      }
    ],
    "codeParams": [
      "account_id"
    ],
    "docParams": [
      "the"
    ]
  },
  {
    "name": "ChainStore#fetchFullAccount",
    "filePath": "lib/chain/src/ChainStore.js",
    "lines": [
      {
        "lineNumber": 893,
        "line": "    /**"
      },
      {
        "lineNumber": 894,
        "line": "     *  Fetches an account and all of its associated data in a single query"
      },
      {
        "lineNumber": 895,
        "line": "     *"
      },
      {
        "lineNumber": 896,
        "line": "     *  @param an account name or account id"
      },
      {
        "lineNumber": 897,
        "line": "     *"
      },
      {
        "lineNumber": 898,
        "line": "     *  @return undefined if the account in question is in the process of being fetched"
      },
      {
        "lineNumber": 899,
        "line": "     *  @return the object if it has already been fetched"
      },
      {
        "lineNumber": 900,
        "line": "     *  @return null if the object has been queried and was not found"
      },
      {
        "lineNumber": 901,
        "line": "     */"
      },
      {
        "lineNumber": 902,
        "line": "    fetchFullAccount(name_or_id, autosubscribe = null) {"
      }
    ],
    "codeParams": [
      "name_or_id",
      "autosubscribe"
    ],
    "docParams": [
      "an"
    ]
  },
  {
    "name": "ChainStore#fetchRecentHistory",
    "filePath": "lib/chain/src/ChainStore.js",
    "lines": [
      {
        "lineNumber": 1143,
        "line": "    /**"
      },
      {
        "lineNumber": 1144,
        "line": "     * There are two ways to extend the account history, add new more"
      },
      {
        "lineNumber": 1145,
        "line": "     * recent history, and extend historic hstory. This method will fetch"
      },
      {
        "lineNumber": 1146,
        "line": "     * the most recent account history and prepend it to the list of"
      },
      {
        "lineNumber": 1147,
        "line": "     * historic operations."
      },
      {
        "lineNumber": 1148,
        "line": "     *"
      },
      {
        "lineNumber": 1149,
        "line": "     *  @param account immutable account object"
      },
      {
        "lineNumber": 1150,
        "line": "     *  @return a promise with the account history"
      },
      {
        "lineNumber": 1151,
        "line": "     */"
      },
      {
        "lineNumber": 1152,
        "line": "    fetchRecentHistory(account, limit = 100) {"
      }
    ],
    "codeParams": [
      "account",
      "limit"
    ],
    "docParams": [
      "account"
    ]
  },
  {
    "name": "Signature.signBufferSha256",
    "filePath": "lib/ecc/src/signature.js",
    "lines": [
      {
        "lineNumber": 65,
        "line": "    /** Sign a buffer of exactally 32 bytes in size (sha256(text))"
      },
      {
        "lineNumber": 66,
        "line": "        @param {Buffer} buf - 32 bytes binary"
      },
      {
        "lineNumber": 67,
        "line": "        @param {PrivateKey} private_key"
      },
      {
        "lineNumber": 68,
        "line": "        @return {Signature}"
      },
      {
        "lineNumber": 69,
        "line": "    */"
      },
      {
        "lineNumber": 70,
        "line": "    static signBufferSha256(buf_sha256, private_key) {"
      }
    ],
    "codeParams": [
      "buf_sha256",
      "private_key"
    ],
    "docParams": [
      "buf",
      "private_key"
    ]
  },
  {
    "name": "Signature#verifyBuffer",
    "filePath": "lib/ecc/src/signature.js",
    "lines": [
      {
        "lineNumber": 106,
        "line": "    /**"
      },
      {
        "lineNumber": 107,
        "line": "        @param {Buffer} un-hashed"
      },
      {
        "lineNumber": 108,
        "line": "        @param {./PublicKey}"
      },
      {
        "lineNumber": 109,
        "line": "        @return {boolean}"
      },
      {
        "lineNumber": 110,
        "line": "    */"
      },
      {
        "lineNumber": 111,
        "line": "    verifyBuffer(buf, public_key) {"
      }
    ],
    "codeParams": [
      "buf",
      "public_key"
    ],
    "docParams": [
      "un-hashed"
    ]
  }
]